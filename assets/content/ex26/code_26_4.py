f = open('26_4.txt')

# вводные данные первой строки
автомобилей = int(f.readline())

# будем сохранять все вхождения в data
data = []
# прочтем все строки
for line in f:
    # и превратим время прибытия, время пребывания в int
    arrv, time, clas = [int(k) if k.isdigit() else k for k in line.split()]
    # а в data запишем время прибытия, время когда авто уедет, и его тип
    data.append([arrv, arrv + time, clas])

# отсортируем данные по возрастанию: сначала по времени прибытия, 
# затем по времени отъезда
data.sort()

# создадим две парковки для двух типов авто
parking_lw = [[] for _ in range(80)]
parking_bus = [[] for _ in range(20)]

# переменные для ответа на вопрос задачи:
# lw_parked — кол-во припаркованных легковушек
# bye_bye — машин уехало, не заняв место
lw_parked = bye_bye = 0

# перебирая машинку из данных, смотрим на ее тип
for car in data:
    # если это микроавтобус, то добавить его можно только 
    # на парковку для микроавтобусов
    if car[2] == 'B':
        # переберем места с нужной парковки
        for spot in range(20):
            # если место не занято (выглядит как []) или время 
            # прибытия микроавтобуса больше или равно времени
            # отъезда последней машины из этого парковочного места
            if (not parking_bus[spot]) or car[0] >= parking_bus[spot][-1][1]:
                # то этот микроавтобус может встать на это парковочное место
                parking_bus[spot].append(car)
                # чтобы не искать новое место для уже 
                # припаркованного микроавтобуса, break
                break
        # если же мы перебрали все места, но так и не нашли свободного, 
        # (прошлись по циклу for без break и попали в else), 
        # то этот микроавтобус уезжает 
        else: bye_bye += 1
    
    # если это легковая машинка, то добавить ее можно на любую парковку
    else:
        # переберем все места с двух парковок
        for spot in range(100):
            # Сначала машинка проверяет место для легвовушек (по условию),
            # это первые 80 мест
            if spot < 80:
                # если место не занято (выглядит как []) или время прибытия
                # машинки больше или равно времени отъезда последней машинки 
                # из этого парковочного места
                if (not parking_lw[spot]) or car[0] >= parking_lw[spot][-1][1]:
                    # то эта машинка может встать на это парковочное место
                    parking_lw[spot].append(car)
                    # не забываем посчитать, что легковушка нашла себе место
                    lw_parked += 1
                    break
            # если не нашли место среди легковых, ищем место среди 
            # микроавтобусов, это последние 20 мест
            else:
                # тк на парковке для микроавтобусов всего 20 мест, 
                # а spot здесь >= 80, то нам нужно вычесть 80 для соблюдения
                # индексов при обращении к парковке микроавтобусов 
                spot -= 80

                # если место не занято (выглядит как []) или время прибытия 
                # машинки больше или равно времени отъезда последней машины 
                # из этого парковочного места
                if (not parking_bus[spot]) or car[0] >= parking_bus[spot][-1][1]:
                    # то эта машинка может встать на это парковочное место
                    parking_bus[spot].append(car)
                    # не забываем посчитать, что легковушка нашла себе место
                    lw_parked += 1
                    break
        # если же мы перебрали все места, но так и не нашли свободного, 
        # (прошлись по циклу for без break и попали в else),
        # то эта машинка уезжает 
        else: bye_bye += 1

# выводим ответ строго в правильном порядке
print(lw_parked, bye_bye)